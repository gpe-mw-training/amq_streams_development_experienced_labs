---
kind: Template
apiVersion: v1
metadata:
  name: kafka-consumer-native
objects:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: ${SERVICE_ACCOUNT}
      labels:
        app: '${APPLICATION_NAME}'
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: kafka-consumer
    data:
      application.properties: >-
        mp.messaging.incoming.messages.bootstrap.servers=${KAFKA_BOOTSTRAP_ADDRESS}

        mp.messaging.incoming.messages.topic=${KAFKA_TOPIC}

        mp.messaging.incoming.messages.group.id=${KAFKA_GROUP_ID}

  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        matchLabels:
          deployment: ${APPLICATION_NAME}
          app: ${APPLICATION_NAME}
      template:
        metadata:
          labels:
            deployment: ${APPLICATION_NAME}
            app: ${APPLICATION_NAME}
        spec:
          serviceAccount: ${SERVICE_ACCOUNT}
          serviceAccountName: ${SERVICE_ACCOUNT} 
          containers:
            - env:
                - name: KUBERNETES_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
              image: quay.io/btison/kafka-consumer:0.0.1
              imagePullPolicy: IfNotPresent
              name: ${APPLICATION_NAME}
              ports:
                - containerPort: 8080
                  name: http
                  protocol: TCP
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 3
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 3
                periodSeconds: 10
                timeoutSeconds: 3
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              securityContext:
                privileged: false
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /work/config
                  name: config
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - configMap:
                defaultMode: 420
                name: ${APPLICATION_CONFIGMAP}
              name: config
parameters:
  - description: The name for the application.
    name: APPLICATION_NAME
    required: true
    value: kafka-consumer
  - name: CPU_REQUEST
    required: true
    value: '0.1'
  - name: CPU_LIMIT
    required: true
    value: '0.5'
  - name: MEMORY_REQUEST
    required: true
    value: '100Mi'
  - name: MEMORY_LIMIT
    required: true
    value: '200Mi'
  - name: APPLICATION_CONFIGMAP
    required: true
    value: kafka-consumer
  - name: SERVICE_ACCOUNT
    required: true
    value: kafka-consumer
  - name: KAFKA_BOOTSTRAP_ADDRESS
    required: true
  - name: KAFKA_TOPIC
    required: true
  - name: KAFKA_GROUP_ID
    value: kafka-consumer